c
@shopping_cart_decorator.current_cost
params[:id]
@shopping_cart_decorator
@shopping_cart_decorator.current_cost
@shopping_cart_decorator.shopping_cart
@shopping_cart_decorator.add_item(params[:id])
@shopping_cart_decorator.shopping_cart
@shopping_cart_decorator.@shopping_cart
@shopping_cart_decorator
c
params.permit(:kind, :sort_direction, :sort_by, :term)
permitted_items_filter_params
params
l-
c
@items          = items_data[:items].map { |item| Item.new(item)}
l
l-
c
items_data[:items].map { |item| Item.new(item)}
c
Item
::Types
Types
c
x
Dry.Types()::Integer
c
Item
c
@items          = items_data[:items].map { |item| Item.new(item)}
@items          = items_data[:items].map { |item| cItem.new(item)}
c
@items          = items_data[:items].map { |item| Structs::Item.new(item)}
c
item[:id]
item.id
 Structs::Item.new(item)
 Structs::Item
 Structs::Item.class
 Structs::Item
item = items_data[:items].first
c
Struct::Item.new(item)
item
item = items_data[:items].first
item
item = items_data[:items]
items_data[:items].first[:id]
items_data[:items].first
c
Struct::Item.new(item)
item = items.first
items.first
items = items_data[:items]
items_data[:items]
items_data = Orchestrator::Adapter.get_items(permitted_items_filter_params.merge(with_meta: true))
c
cc
items_data[:items].first
c
items_data.dig(:meta, :select_options)
c
items_data.dig(:meta, :select_options)
c
items_data[:mata]
items_data['meta']
items_data[:meta]
items_data
items_data.dig(:meta, :select_options)
Pagy.new(count: pagination_data[:count], page: pagination_data[:page])
clear
@items.first
@items
l
l-
c
client.get('api/v1/items', request_params)
request_params = params.slice(:filter, :with_meta).merge(ascxzc: :qweds)
client.get('api/v1/items', request_params)
request_params = params.slice(:filter, :with_meta)
c
get_params = params
client.get('api/v1', params)
params = { fiz: :baz}
client.get('api/v1', { fiz: :baz})
c
continue
res.status
res
res = client.get('api/v1/items', params.slice(:filter, :with_meta))
res
res = _
client.get('api/v1/items', params.slice(:filter, :with_meta))
params.slice(:filter, :with_meta)
client.get('api/v1/items', params.slice(:filter, :with_meta))
params.slice(:filter, :with_meta)
params.slice(:filter)
params
c
params[:kind] == SELECT_OPTIONS['all'] || params[:kind].nil?
params[:kind] == SELECT_OPTIONS['all'] && params[:kind].nil?
params[:kind] == SELECT_OPTIONS['all']
c
SELECT_OPTIONS['all']
params[:kind] == SELECT_OPTIONS['all']
params[:kind]
params[:kind] == SELECT_OPTIONS['all']
c
params[:kind] == SELECT_OPTIONS['all'] && params[:kind].nil?
params[:kind] == SELECT_OPTIONS['all'] || params[:kind].nil?
params[:kind]
params[:kind].nil?
params[:kind] == SELECT_OPTIONS['all'] || params[:kind].nil?
params[:kind].nil?
params[:kind] == SELECT_OPTIONS['all']
params[:kind] == SELECT_OPTIONS['all'] && params[:kind].nil?
c
Item.count
items.count
items
c
params[:kind] == SELECT_OPTIONS['all']
items
c
items
c
params[:kind]
params
l
l-
continue
