c
Rails.application.config.autoload_paths
Rails.application.autoload_paths
Rails.application.autoloaders
Rails.application.autoload_path
Rails.application.eager_load
Rails.application
Adapters::Orchestrator
Adapters
SetRequestIdMiddleware
UpdateOrderConsumer
UpdateOrderConsume
l
l-
c
Adapters::Clietn
Adapters
'UpdateOrderConsumer'.underscore
'UpdateOrderConsumer'.snakecase
'UpdateOrderConsumer'.camelize
'UpdateOrderConsumer'.camalize
UpdateOrderConsumer.to_s
SetRequestIdMiddleware
UpdateOrderConsumer
l
l-
c
message
c
response
message
messag
c
client.default_header
client.default_headers
client.head
client.headers
client
c
Thread.current[:request_id]
Thread.current
c
app.config.logger.level
app.config.logger
c
Rails.application.env
Rails.application
app.environment
app.env
app
c
order
c
order
c
order
c
element_state
order_state
l-
c
flash
c
flash
c
flash
@flash
c
@orders = orders_finder.call.orders
filter
c
@orders.last.created_at.str_format
@orders.last.created_at.str_foemat
@orders.last.created_at
@orders.last
@orders.last.created_at
@orders.last.crated_at
@orders.last.crated_ay
@orders.last.crated_a
@orders.last
c
с
c
@orders.first.created_at
@orders.first
c
items
c
items
c
items
c
items
c
items
item
c
items
citems
c
order['items']
order
c
@orders.orders
@orders
l-
c
state_mapper(params[:filter][:state])
c
state_mapper('active')
params[:filter][:state]
params[:filter]
c
с
c
params[:filter]
c
params[:filter]
c
l-
l
l-
c
create_result.id
create_result
c
Structs::Order.new(response['data'])
c
response['data']
Structs::Order.new(response['data'])
c
Structs::Order.new(response['data'])
response
c
validate_result[:errors]
validate_result.key?(:errors)
validate_result
c
JSON.parse "{\"item_ids\"=>[\"is missing\"]}"
JSON.parse
e.message
c
content['errors']
c
content
content['errors']
c
message
reponse
message.content
JSON.parse content
content
c
e.message
e
c
e
e.message
c
message.content
c
message.content
c
client.send_request('POST', '/api/v1/orders/validate',body: { order: order })
c
client.send_request('POST', '/api/v1/orders/validate',body: { order: order })
c
client.send_request('POST', '/api/v1/orders/validate',body: { order: order })
l-
l
c
e.message
l
l-
c
id
shopping_cart.items
c
params[:item_action]
params[:item_action]]
c
params[:action]
c
params['item_id']
['item_id']
params
c
@shopping_cart.cost
@shopping_cart.current_items
c
@shopping_cart.cost
@shopping_cart.current_items
@shopping_cart.items
c
@shopping_cart.current_items
@shopping_cart
c
@shopping_cart.shopping_cart
params
@shopping_cart.current_items
@shopping_cart.cost
@shopping_cart.item
@shopping_cart.cost
c
@shopping_cart.cost
c
@shopping_cart.current_items.count
@shopping_cart.current_items
c
@shopping_cart.current_items
@shopping_cart.cost
c
 @shopping_cart.current_items
c
items.count
items
c
items
c
@shopping_cart.current_items
c
@shopping_cart.current_items
c
@shopping_cart
c
@shopping_cart
c
@shopping_cart.current_items.count
@shopping_cart.current_items
c
result.first
result
c
items_with_meta = ItemFinder.call(id: params[:item_id], orchestrator_adapter: Thread.current[:orchestrator_adapter]).items.first
items_with_meta = ItemFinder.call(id: params[:item_id], orchestrator_adapter: Thread.current[:orchestrator_adapter]).items.first['data']
items_with_meta = ItemFinder.call(id: params[:item_id], orchestrator_adapter: Thread.current[:orchestrator_adapter]).items.first
items_with_meta = ItemFinder.call(id: params[:item_id], orchestrator_adapter: Thread.current[:orchestrator_adapter]).items
items_with_meta = ItemFinder.call(id: params[:item_id], orchestrator_adapter: Thread.current[:orchestrator_adapter]).item
items_with_meta = ItemFinder.call(id: params[:item_id], orchestrator_adapter: Thread.current[:orchestrator_adapter])
ItemFinder.call(id: params[:item_id])
@shopping_cart.current_items
@shopping_cart.current_items.detect { |i| i.id == params[:item_id]}
params
c
@item_categories
c
@items.first(5)
c
client.send_request('GET', "/api/v1/items/categories")['data']
client.send_request('GET', "/api/v1/items/categories")
l
l-
c
@shopping_cart.current_items.any?
@shopping_cart.current_items
@shopping_cart
